import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet

# 1. Data Collection and Cleaning
ibov_data = yf.download('^BVSP', start='2020-01-01', end='2023-01-01')
ibov_data.dropna(inplace=True)

# 2. Exploratory Data Analysis (EDA)
plt.figure(figsize=(12, 6))
plt.plot(ibov_data['Adj Close'])
plt.title('Ibovespa Adjusted Close Price')
plt.xlabel('Date')
plt.ylabel('Price (BRL)')
plt.grid(True)
plt.show()

ibov_data['MA_50'] = ibov_data['Adj Close'].rolling(window=50).mean()
ibov_data['MA_200'] = ibov_data['Adj Close'].rolling(window=200).mean()

plt.figure(figsize=(12, 6))
plt.plot(ibov_data['Adj Close'], label='Adj Close')
plt.plot(ibov_data['MA_50'], label='MA 50')
plt.plot(ibov_data['MA_200'], label='MA 200')
plt.title('Ibovespa Adjusted Close Price with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price (BRL)')
plt.legend()
plt.grid(True)
plt.show()

# 3. Time Series Analysis (ARIMA)
model_arima = ARIMA(ibov_data['Adj Close'], order=(5, 1, 0))
model_arima_fit = model_arima.fit()
forecast_arima = model_arima_fit.forecast(steps=30)

# 3. Time Series Analysis (Prophet)
df_prophet = ibov_data['Adj Close'].reset_index()
df_prophet.columns = ['ds', 'y']
model_prophet = Prophet()
model_prophet.fit(df_prophet)
future = model_prophet.make_future_dataframe(periods=30)
forecast_prophet = model_prophet.predict(future)

# Plot Forecasts
plt.figure(figsize=(12, 6))
plt.plot(ibov_data['Adj Close'], label='Actual')
plt.plot(pd.to_datetime(forecast_prophet['ds'][-30:]), forecast_prophet['yhat'][-30:], label='Prophet Forecast')
plt.plot(pd.to_datetime(forecast_arima.index), forecast_arima, label='ARIMA Forecast', color='red')
plt.title('Ibovespa Stock Price Forecast')
plt.xlabel('Date')
plt.ylabel('Price (BRL)')
plt.legend()
plt.grid(True)
plt.show()

# 4. Feature Engineering (Example: Lag Features)
ibov_data['Lag_1'] = ibov_data['Adj Close'].shift(1)
ibov_data.dropna(inplace=True)

# 5. Predictive Modeling (Linear Regression)
features = ['Lag_1', 'MA_50', 'MA_200']
target = 'Adj Close'
X_train, X_test, y_train, y_test = train_test_split(ibov_data[features], ibov_data[target], test_size=0.2, random_state=42)
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)
y_pred_lr = model_lr.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred_lr)
print(f'Linear Regression MSE: {mse_lr}')

plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Actual')
plt.plot(y_pred_lr, label='Predicted')
plt.title('Linear Regression Model')
plt.legend()
plt.grid(True)
plt.show()

